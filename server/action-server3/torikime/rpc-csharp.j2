using System;
using System.Collections;
using System.Threading.Tasks;

namespace {{ namespace | camelize }}
{
	namespace {{ contract | camelize }}
	{
		namespace {{ name | camelize }}
		{
			{# public class Request {}
			public class Response {}
			public class Notification {} #}

			public class Rpc : {{ namespace | camelize }}.IRpc
			{
{%- if "request" in rpc %}
				public delegate void ResponseCallback(Response response);
				public void Request(Request request, ResponseCallback callback)
				{
					callback(new Response());
				}

                public IEnumerator RequestCoroutine(Request request, ResponseCallback callback)
                {
                    yield return null;
                    callback(new Response());
                }

                public async Task<Response> RequestAsync(Request request)
                {
                    await Task.Delay(1000);
                    return new Response();
                }
{% endif %}

{% if "notification" in rpc %}
				public event Action<Notification> OnNotification;
{% endif %}
			}
		}
	}
}
