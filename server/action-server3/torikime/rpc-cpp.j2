#include "../../../src/rpc.h"

#include "../../../src/session.h"
#include "../../../src/Payload.h"
#include "proto/{{ contract }}_{{ name }}.pb.h"
#include "{{ contract }}_{{ name }}.h"

namespace {{ namespace }}::{{ contract }}::{{ name }}
{
{%- if "request" in rpc %}
	Rpc::Responser::~Responser()
	{
		if (respond)
		{
			return;
		}

		send(false, {});
	}

	void Rpc::Responser::send(bool success, {{ namespace }}::{{ contract }}::{{ name }}::Response&& response)
	{
		{{ namespace }}::{{ contract }}::{{ name }}::ResponseParcel responseParcel;
		responseParcel.set_request_id(_requestId);
		responseParcel.set_allocated_response(&response);
		responseParcel.set_success(success);

		potato::net::protocol::Payload payload;
		payload.getHeader().contract_id = {{ contract_id }};
		payload.getHeader().rpc_id = {{ rpc_id }};
		payload.getHeader().meta = static_cast<uint8_t>(potato::net::protocol::Meta::Response);
		payload.setBufferSize(responseParcel.ByteSize());
		responseParcel.SerializeToArray(payload.getPayloadData(), payload.getHeader().payloadSize);
		responseParcel.release_response();

		_session->sendPayload(payload);

		respond = true;
	}
{% endif %}


	Rpc::Rpc(std::shared_ptr<potato::net::session>& session) : _session(session)
	{
	}

{%- if "request" in rpc %}
	void Rpc::on{{ name | camelize }}Request(const potato::net::protocol::Payload& payload)
	{
		{{ namespace }}::{{ contract }}::{{ name }}::RequestParcel requestParcel;
		deserialize(payload, requestParcel);

		auto responser = std::make_shared<Responser>(_session, requestParcel.request_id());
		_requestDelegate(requestParcel, responser);
	}

	void Rpc::subscribeRequest(Rpc::RequestDelegate callback)
	{
		_requestDelegate = callback;
	}
{% endif %}

{% if "notification" in rpc %}
	potato::net::protocol::Payload Rpc::serializeNotification({{ namespace }}::{{ contract }}::{{ name }}::Notification& notification)
	{
		{{ namespace }}::{{ contract }}::{{ name }}::NotificationParcel notificationParcel;
		notificationParcel.set_allocated_notification(&notification);
		notificationParcel.set_notification_id(++_notificationId);

		potato::net::protocol::Payload payload;
		payload.getHeader().contract_id = {{ contract_id }};
		payload.getHeader().rpc_id = {{ rpc_id }};
		payload.getHeader().meta = static_cast<uint8_t>(potato::net::protocol::Meta::Notification);
		payload.setBufferSize(notificationParcel.ByteSize());
		notificationParcel.SerializeToArray(payload.getPayloadData(), payload.getHeader().payloadSize);
		notificationParcel.release_notification();
        return payload;
	}
{% endif %}

{%- if "request" in rpc %}
	void Rpc::deserialize(const potato::net::protocol::Payload& payload, {{ namespace }}::{{ contract }}::{{ name }}::RequestParcel& outRequest)
	{
		outRequest.Clear();
		outRequest.ParseFromArray(payload.getPayloadData(), payload.getHeader().payloadSize);
	}
{% endif %}

{# {%- if "request" in rpc %} #}
	bool Rpc::receievePayload(const potato::net::protocol::Payload& payload)
	{
		switch (payload.getHeader().rpc_id)
		{
{%- if "request" in rpc %}
		case {{ rpc_id }}:
			on{{ name | camelize }}Request(payload);
			return true;
{% endif %}
        default:
            return false;
		}
	}
{# {% endif %} #}
}