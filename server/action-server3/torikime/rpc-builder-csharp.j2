// Generated by the torikime.  DO NOT EDIT!
using System;
using System.Collections.Generic;

namespace {{ namespace | camelize }}
{
    using OnSubscribeRequestDelegate = Action<Google.Protobuf.IMessage>;

    public interface IRpc
    {
        ushort ContractId { get; }
        ushort RpcId { get; }
        Google.Protobuf.IMessage ReceievePayload(Potato.Network.Protocol.Payload payload);
        void SubscribeRequest(OnSubscribeRequestDelegate onSubscribeRequest);
    }

    public static class RpcBuilder
    {
        public static List<IRpc> Build(Potato.Network.Session session)
        {
            var rpcs = new List<IRpc>
            {
{% for contract in contracts %}
{%- for name in contract.names_with_notifications %}
                new {{ contract.name | camelize }}.{{ name | camelize }}.Rpc(session),
{%- endfor %}
{%- endfor %}
            };
            return rpcs;
        }
    }

    public static class RpcHolder
    {
        public static List<IRpc> Rpcs { get; set; }

        public static void Clear()
        {
            Rpcs.Clear();
        }

        public static T GetRpc<T>() where T : IRpc
        {
            return (T)Rpcs.Find(x => x is T);
        }

        public static IRpc GetRpc(Network.Protocol.Payload payload)
        {
            return Rpcs.Find(x => x.ContractId == payload.Header.contract_id && x.RpcId == payload.Header.rpc_id);
        }

        static private OnSubscribeRequestDelegate onSubscribeRequest;
        static public void SubscribeRequest(OnSubscribeRequestDelegate callback)
        {
            onSubscribeRequest = callback;
            foreach (var rpc in Rpcs)
            {
                rpc.SubscribeRequest(onSubscribeRequest);
            }
        }
    }
}
// Generated by the torikime.  DO NOT EDIT!
