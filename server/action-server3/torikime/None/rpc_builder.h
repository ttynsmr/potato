// Generated by the torikime.  DO NOT EDIT!

#pragma once

#include <memory>

namespace potato {
	namespace net {
		class Session;
	}
}

class NetworkServiceProvider;


namespace torikime::area::constituted_data { class Rpc; }
namespace torikime::auth::login { class Rpc; }
namespace torikime::battle::skill_cast { class Rpc; }
namespace torikime::chat::send_message { class Rpc; }
namespace torikime::diagnosis::sever_sessions { class Rpc; }
namespace torikime::diagnosis::ping_pong { class Rpc; }
namespace torikime::channel::search { class Rpc; }
namespace torikime::channel::create { class Rpc; }
namespace torikime::unit::spawn_ready { class Rpc; }
namespace torikime::unit::move { class Rpc; }
namespace torikime::unit::stop { class Rpc; }

class RpcBuilder
{
public:
	RpcBuilder();
	~RpcBuilder();

	void build(std::shared_ptr<NetworkServiceProvider> provider, std::shared_ptr<potato::net::Session> session);
	struct
	{
		std::shared_ptr<torikime::area::constituted_data::Rpc> constitutedData;
	} area;

	struct
	{
		std::shared_ptr<torikime::auth::login::Rpc> login;
	} auth;

	struct
	{
		std::shared_ptr<torikime::battle::skill_cast::Rpc> skillCast;
	} battle;

	struct
	{
		std::shared_ptr<torikime::chat::send_message::Rpc> sendMessage;
	} chat;

	struct
	{
		std::shared_ptr<torikime::diagnosis::sever_sessions::Rpc> severSessions;
		std::shared_ptr<torikime::diagnosis::ping_pong::Rpc> pingPong;
	} diagnosis;

	struct
	{
		std::shared_ptr<torikime::channel::search::Rpc> search;
		std::shared_ptr<torikime::channel::create::Rpc> create;
	} channel;

	struct
	{
		std::shared_ptr<torikime::unit::spawn_ready::Rpc> spawnReady;
		std::shared_ptr<torikime::unit::move::Rpc> move;
		std::shared_ptr<torikime::unit::stop::Rpc> stop;
	} unit;

};

// Generated by the torikime.  DO NOT EDIT!