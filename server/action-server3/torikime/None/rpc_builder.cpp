// Generated by the torikime.  DO NOT EDIT!
#include "rpc_builder.h"

#include "rpc/rpc.h"
#include "session/session.h"
#include "services/network_service_provider.h"

#include "message.pb.h"


#include "area_constituted_data.pb.h"
#include "area_constituted_data.h"
#include "auth_login.pb.h"
#include "auth_login.h"
#include "battle_skill_cast.pb.h"
#include "battle_skill_cast.h"
#include "chat_send_message.pb.h"
#include "chat_send_message.h"
#include "diagnosis_sever_sessions.pb.h"
#include "diagnosis_sever_sessions.h"
#include "diagnosis_ping_pong.pb.h"
#include "diagnosis_ping_pong.h"
#include "channel_search.pb.h"
#include "channel_search.h"
#include "channel_create.pb.h"
#include "channel_create.h"
#include "unit_spawn_ready.pb.h"
#include "unit_spawn_ready.h"
#include "unit_move.pb.h"
#include "unit_move.h"
#include "unit_stop.pb.h"
#include "unit_stop.h"

RpcBuilder::RpcBuilder() {}
RpcBuilder::~RpcBuilder() {}

void RpcBuilder::build(std::shared_ptr<NetworkServiceProvider> provider, std::shared_ptr<potato::net::Session> session)
{

	area.constitutedData = std::make_shared<torikime::area::constituted_data::Rpc>(session);
	provider->registerRpc(area.constitutedData);
	auth.login = std::make_shared<torikime::auth::login::Rpc>(session);
	provider->registerRpc(auth.login);
	battle.skillCast = std::make_shared<torikime::battle::skill_cast::Rpc>(session);
	provider->registerRpc(battle.skillCast);
	chat.sendMessage = std::make_shared<torikime::chat::send_message::Rpc>(session);
	provider->registerRpc(chat.sendMessage);
	diagnosis.severSessions = std::make_shared<torikime::diagnosis::sever_sessions::Rpc>(session);
	provider->registerRpc(diagnosis.severSessions);
	diagnosis.pingPong = std::make_shared<torikime::diagnosis::ping_pong::Rpc>(session);
	provider->registerRpc(diagnosis.pingPong);
	channel.search = std::make_shared<torikime::channel::search::Rpc>(session);
	provider->registerRpc(channel.search);
	channel.create = std::make_shared<torikime::channel::create::Rpc>(session);
	provider->registerRpc(channel.create);
	unit.spawnReady = std::make_shared<torikime::unit::spawn_ready::Rpc>(session);
	provider->registerRpc(unit.spawnReady);
	unit.move = std::make_shared<torikime::unit::move::Rpc>(session);
	provider->registerRpc(unit.move);
	unit.stop = std::make_shared<torikime::unit::stop::Rpc>(session);
	provider->registerRpc(unit.stop);
}
// Generated by the torikime.  DO NOT EDIT!