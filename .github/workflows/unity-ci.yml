name: ðŸ“ºGame CI

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/**.yml"
      - "client/**"
      - "server/action-server3/torikime/**"
      - "server/action-server3/rpc/**"
  pull_request:
    branches: [main]
    paths:
      - ".github/workflows/**.yml"
      - "client/**"
      - "server/action-server3/torikime/**"
      - "server/action-server3/rpc/**"
  workflow_dispatch:
    inputs:
      artifact_windows:
        required: true
        type: boolean
        description: "Artifact Windows"
      artifact_osx:
        required: true
        type: boolean
        description: "Artifact macOS"
      artifact_ios:
        required: true
        type: boolean
        description: "Artifact iOS"
      artifact_android:
        required: true
        type: boolean
        description: "Artifact Android"

jobs:
  build:
    name: âœ¨Build my project
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target: [StandaloneWindows64]

    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10.2"
          architecture: "x64"

      # Cache
      - uses: actions/cache@v3
        with:
          path: client/potato/Library
          key: Library-${{ hashFiles('client/potato/Assets/**', 'client/potato/Packages/**', 'client/potato/ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: apt update
        run: sudo apt-get update
      - name: Various installations
        run: sudo apt-get install -yq tree
      - name: protocol buffers
        run: sudo apt-get install -yq protobuf-compiler

      - name: âš—Generate RPC
        run: |
          pushd server/action-server3
          pushd torikime
          python -m pip install --upgrade pip
          pip install pipenv --upgrade-strategy=only-if-needed
          pipenv sync
          pipenv run python torikime.py -v -o "../proto" -s "../../../client/potato/Assets/Scripts/Rpc/Generated" -i "../rpc"
          popd
          ./generate_csharp_proto.sh
          # find ./proto -name "*.proto"
          # protoc --proto_path=./proto --csharp_out=../../client/potato/Assets/Scripts/Proto ./proto/*.proto
          popd

      - name: list output
        run: |
          tree server
          tree client/potato/Assets/Scripts

      # Test
      - name: Run tests
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          projectPath: client/potato

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.target }}
          projectPath: client/potato
          allowDirtyBuild: true

      # Output
      - uses: actions/upload-artifact@v2
        if: ${{ github.event.inputs.artifact_windows == 'true' }}
        with:
          name: potato-${{ matrix.target }}
          path: builds/${{ matrix.target }}
